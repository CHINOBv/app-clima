{"version":3,"sources":["components/Header.jsx","components/Form.jsx","components/Error.jsx","components/Clima.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","this","props","titulo","Component","Form","state","Ciudad","React","createRef","Pais","buscarClima","e","preventDefault","respuesta","current","value","DataCons","onSubmit","id","type","ref","htmlFor","defaultValue","Error","Clima","ShowRes","resultado","name","main","weather","k","icon","parseInt","temp","src","alt","temp_max","temp_min","App","APICon","url","fetch","then","json","datos","setState","catch","error","prevProps","prevState","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.623afd6a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <div>\n          <nav>\n            <div className=\"nav-wrapper ligth-blue darken-2\">\n              <p className=\"brand-logo\">{this.props.titulo}</p>\n            </div>\n          </nav>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nclass Form extends Component {\n  state = {};\n  //create Refs\n  Ciudad = React.createRef();\n  Pais = React.createRef();\n\n\n  buscarClima=(e)=>{\n      e.preventDefault();\n    //Create Object\n    const respuesta = {\n        Ciudad : this.Ciudad.current.value,\n        Pais : this.Pais.current.value\n    }\n    //send Object\n    this.props.DataCons(respuesta);\n  }\n  render() {\n    return (\n      <div className=\"contenedor-form\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <form onSubmit={this.buscarClima}>\n              <div className=\"input-field col s12 m8 l4 offset-m2\">\n                <input id=\"ciudad\" type=\"text\" ref={this.Ciudad}/>\n                <label htmlFor=\"ciudad\">Ciudad: </label>\n              </div>\n              <div className=\"input-field col s12 m8 l4 offset-m2\">\n                <select ref={this.Pais}>\n                  <option value=\"\" defaultValue>\n                    Selecciona un Pais\n                  </option>\n                  <option value=\"AR\">Argentina</option>\n                  <option value=\"CO\">Colombia</option>\n                  <option value=\"CR\">Costa Rica</option>\n                  <option value=\"ES\">Espa√±a</option>\n                  <option value=\"US\">Estados Unidos</option>\n                  <option value=\"MX\">Mexico</option>\n                  <option value=\"PE\">Peru</option>\n                </select>\n                  <label htmlFor=\"pais\">Pais: </label>\n              </div>\n              <div className=\"input-field col s12 m8 l4 offset-2\">\n                <input\n                  type=\"submit\"\n                  value=\"Buscar\"\n                  className=\"btn-large yellow accent-4\"\n                />\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from 'react';\n\nclass Error extends Component {\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col s2 m6 offset-m3\">\n                        <div className=\"card-panel red darken-4 error\">\n                            <h1>Los campos son obligatorios</h1>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Error;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Clima extends Component {\n    ShowRes=()=>{\n        \n        //Get Data Consult & Destructure\n        const {name,main,weather} = this.props.resultado;\n        if(!name|| !main|| !weather) return null;\n\n        const k = 273.15;\n\n        const icon = `http://openweathermap.org/img/wn/${weather[0].icon}.png`\n\n        return(\n            <div className='row'>\n                <div className=\"resultado col s12 m8 l6 offset-m2 offset-l3\">\n                    <div className=\"card-panel light-blue center-align\">\n                        <span className='white-text'>\n                            <h2>Resultado Clima de : {name}</h2>\n                            <p className=\"temperatura\">\n                                Actual: {parseInt(main.temp-k)} &deg;C \n                                <img src={icon} alt=\"clima\"/>\n                            </p>\n                            <p>Maxima: {parseInt(main.temp_max-k)}</p>\n                            <p>Minima: {parseInt(main.temp_min-k)}</p>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    render() {\n        return (\n            <div className=\"container\">\n                {this.ShowRes()}\n            </div>\n        );\n    }\n}\n\nClima.propTypes = {\n\n};\n\nexport default Clima;","import React, { Component } from \"react\";\nimport Header from \"./components/Header.jsx\";\nimport Form from \"./components/Form.jsx\";\nimport Error from \"./components/Error.jsx\";\nimport Clima from \"./components/Clima.jsx\";\n\nclass App extends Component {\n  state = {\n    Error: false,\n    respuesta: {},\n    resultado: {}\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.respuesta !== this.state.respuesta) {\n      this.APICon();\n      \n    }\n  }\n\n  APICon = () => {\n    //Destructuring Data\n    const { Ciudad, Pais } = this.state.respuesta;\n    //Validate Fields\n    if (!Ciudad || !Pais) return null;\n    //Declared Api ID\n    const appID = \"171636f1e57033ef063ae3271d79b74e\";\n    //API DATA URL\n    let url = `https://api.openweathermap.org/data/2.5/weather?q=${Ciudad},${Pais}&appid=${appID}`;\n\n    //Query con Fecth API\n    fetch(url)\n      .then(respuesta => {\n        return respuesta.json();\n      })\n      .then(datos => {\n        this.setState({\n          resultado: datos\n        });\n      })\n      .catch(error => {\n        this.setState({\n          Error: error\n        });\n      });\n\n    //Consult API\n  };\n\n  DataCons = respuesta => {\n    //verificando los campos\n    if (respuesta.Ciudad === \"\" || respuesta.Pais === \"\") {\n      this.setState({\n        Error: true\n      });\n    } else {\n      //Add the Object to theState\n      this.setState({\n        respuesta,\n        Error: false\n      });\n    }\n  };\n  render() {\n    const error = this.state.Error;\n    let resultado;\n    if (error === true) {\n      resultado = <Error />;\n    } else {\n      resultado = <Clima \n      resultado={this.state.resultado} \n      />;\n    }\n    return (\n      <div className=\"app\">\n        <Header titulo={\"Clima\"} />\n        <Form DataCons={this.DataCons} />\n\n        {resultado}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}